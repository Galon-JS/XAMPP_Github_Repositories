// imports
import { error, step } from 'node-cli';
import openDefaultBrowser from 'open';
import http from 'http';
/** A nice wrapper for express.listen() */
export class ExpressListen {
    constructor(app) {
        this.app = app;
        this.sockets = new Set();
        this.httpServer = http.createServer(app);
    }
    /** Immediately kill the server. */
    async kill() {
        for (const socket of this.sockets) {
            socket.destroy();
            this.sockets.delete(socket);
        }
        return new Promise(resolve => {
            this.httpServer.close(() => {
                step('Bye!');
                return resolve();
            });
        });
    }
    async listen(port, open = false) {
        try {
            await this.tryToListen(port);
            step(`Listening at http://localhost:${this.port}`);
            if (open) {
                step(`Opening Browser`);
                openDefaultBrowser(`http://localhost:${this.port}`).catch(() => {
                    error(`Could not open browser at http://localhost:${this.port}`, false);
                });
            }
            return port;
        }
        catch (err) {
            error(err.message, true);
            return -1;
        }
    }
    /** Tries to listen on a free port. */
    tryToListen(port) {
        let _port = typeof port === 'string' ? parseInt(port) : parseInt(port.toFixed(2));
        return new Promise((resolve, reject) => {
            // Handle server startup errors
            this.httpServer.once('error', (e) => {
                console.log('error');
                if (e.code && e.code === 'EADDRINUSE') {
                    setTimeout(() => {
                        this.tryToListen((_port += 1));
                    }, 500);
                }
                else {
                    this.kill();
                    reject(e);
                }
            });
            this.httpServer.on('connection', socket => {
                this.sockets.add(socket);
            });
            // Handle successful httpServer
            this.httpServer.once('listening', ( /*e*/) => {
                this.port = this.httpServer.address().port;
                resolve();
            });
            this.httpServer.listen(_port);
        });
    }
}
