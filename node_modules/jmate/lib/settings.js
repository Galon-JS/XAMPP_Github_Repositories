// Generated by CoffeeScript 1.12.7
(function() {
  var commander, fatalErr, file, fileIsWritable, files, fs, i, idx, len, loadDiskSettings, loadSettings, options, os, path, retObj, stat, yaml;

  fs = require("fs");

  path = require("path");

  os = require("os");

  commander = require("commander");

  yaml = require("js-yaml");

  module.exports = retObj = {};

  options = files = void 0;

  loadDiskSettings = function() {
    var ex, file, fileList, homePath, i, len, params, rcFile;
    homePath = process.env[(os.platform() === "win32" ? "USERPROFILE" : "HOME")];
    if (os.platform() === "win32") {
      fileList = [path.join(homePath, ".jmate.rc"), path.join(homePath, ".rmate.rc")];
    } else {
      fileList = [path.join("etc", "jmate.rc"), path.join("etc", "rmate.rc"), path.join(homePath, ".jmate.rc"), path.join(homePath, ".rmate.rc")];
    }
    for (i = 0, len = fileList.length; i < len; i++) {
      file = fileList[i];
      if (fs.existsSync(file)) {
        rcFile = file;
        break;
      }
    }
    if (rcFile == null) {
      return;
    }
    try {
      params = yaml.safeLoad(fs.readFileSync(rcFile, "utf8"));
      if (params.host != null) {
        options.host = params.host;
      }
      if (params.port != null) {
        return options.port = params.port;
      }
    } catch (error) {
      ex = error;
      return console.error(ex);
    }
  };

  loadSettings = function() {
    retObj.options = options = {
      host: "localhost",
      port: 52698,
      wait: false,
      force: false,
      verbose: false,
      lines: [],
      names: [],
      types: []
    };
    loadDiskSettings();
    if (process.env.RMATE_HOME != null) {
      options.host = process.env.RMATE_HOME;
    }
    if (process.env.RMATE_PORT != null) {
      options.port = process.env.RMATE_PORT;
    }
    if (process.env.JMATE_HOME != null) {
      options.host = process.env.JMATE_HOME;
    }
    if (process.env.JMATE_PORT != null) {
      return options.port = process.env.JMATE_PORT;
    }
  };

  loadSettings();

  commander.version(require("../package.json").version).usage("[options] <file ...>").option("-h, --host <str>", "Connect to host. Use 'auto' to detect the host from SSH. Defaults to '" + options.host + "'.").option("-p, --port <num>", "Port number to use for connection. Defaults to " + options.port + ".", parseInt).option("-w, --wait", "Wait for file to be closed by editor.").option("-l, --line <num>", "Place caret on line <num> after loading file.", parseInt).option("-n, --name <str>", "The display name shown in editor.").option("-t, --type <str>", "Treat file as having type <str>.").option("-f, --force", "Open even if the file is not writable.").option("-v, --verbose", "Verbose logging messages.");

  commander.parse(process.argv);

  if (commander.host != null) {
    options.host = commander.host;
  }

  if (commander.port != null) {
    options.port = commander.port;
  }

  if (commander.wait != null) {
    options.wait = commander.wait;
  }

  if (commander.line != null) {
    options.lines.push(commander.line);
  }

  if (commander.name != null) {
    options.names.push(commander.name);
  }

  if (commander.type != null) {
    options.types.push(commander.type);
  }

  if (commander.force != null) {
    options.force = commander.force;
  }

  if (commander.verbose != null) {
    options.verbose = commander.verbose;
  }

  if (options.host === "auto") {
    options.host = (process.env.SSH_CONNECTION != null ? process.env.SSH_CONNECTION.split(" ")[0] : "localhost");
  }

  retObj.fileIsWritable = fileIsWritable = function(file) {
    var ex, fd;
    try {
      fd = fs.openSync(file, "a");
      fs.closeSync(fd);
      return true;
    } catch (error) {
      ex = error;
      return false;
    }
  };

  fatalErr = function(msg) {
    console.error(msg);
    return process.exit(1);
  };

  retObj.files = files = commander.args.slice(0);

  if (files.length === 0 && (!process.stdin.isTTY || options.wait)) {
    files.push("-");
  }

  for (idx = i = 0, len = files.length; i < len; idx = ++i) {
    file = files[idx];
    if (file === "-") {
      if (process.stdin.isTTY) {
        console.error("Reading from stdin, press ^D to stop");
      }
    } else if (fs.existsSync(file)) {
      stat = fs.statSync(file);
      if (stat.isDirectory()) {
        fatalErr(file + " is a directory. aborting...");
      }
      if (!fileIsWritable(file)) {
        if (options.force) {
          if (options.verbose) {
            console.error("file " + file + " is not writable.  Opening anyway.");
          }
        } else {
          fatalErr("file " + file + " is not writable.  Use -f/--force to open anyway");
        }
      }
    }
  }

}).call(this);
