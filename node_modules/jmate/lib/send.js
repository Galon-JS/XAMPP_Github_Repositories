// Generated by CoffeeScript 1.12.7
(function() {
  var async, fs, path, settings;

  fs = require("fs");

  path = require("path");

  async = require("async");

  settings = require("./settings");

  module.exports = function(tcp, callback) {
    var file, files, idx, itr, options, pairs, sendEmptyFile, sendFile, sendOpen, sendStdin, writeVar;
    options = settings.options, files = settings.files;
    writeVar = function(name, val) {
      return tcp.write(name + ": " + val + "\n");
    };
    sendStdin = function(callback) {
      var loadStdin;
      loadStdin = function(callback) {
        var data;
        data = new Buffer();
        process.stdin.on("data", function(_data) {
          return data = Buffer.concat(data, _data);
        });
        process.stdin.on("error", function(err) {
          return callback(err);
        });
        return process.stdin.on("end", function() {
          return callback(null, data);
        });
      };
      return loadStdin(function(err, data) {
        if (err) {
          return callback(err);
        }
        if (data == null) {
          return callback();
        }
        writeVar("data", data.length);
        return tcp.write(data, function() {
          return callback();
        });
      });
    };
    sendFile = function(file, callback) {
      var readStream, stat;
      stat = fs.statSync(file);
      if (!stat.isFile()) {
        return callback(new Error("Not a file"));
      }
      if (stat.size == null) {
        return callback(new Error("Cannot determine file size"));
      }
      writeVar("data", stat.size);
      readStream = fs.createReadStream(file);
      readStream.on("error", function(err) {
        return callback(err);
      });
      readStream.on("end", function() {
        return callback();
      });
      return readStream.pipe(tcp, {
        end: false
      });
    };
    sendEmptyFile = function(callback) {
      writeVar("data", 0);
      return tcp.write("0", function() {
        return callback();
      });
    };
    sendOpen = function(file, idx, callback) {
      var sendData;
      tcp.write("open\n");
      if (options.names.length > idx) {
        writeVar("display-name", options.name[idx]);
      } else if (file === "-") {
        writeVar("display-name", tcp.localAddress + ":untitled (stdin)");
      } else {
        writeVar("display-name", tcp.localAddress + ":" + file);
      }
      if (file !== "-") {
        writeVar("real-path", path.resolve(file));
      }
      writeVar("data-on-save", "yes");
      writeVar("re-activate", "yes");
      writeVar("token", file);
      if (options.lines.length > idx) {
        writeVar("selection", options.lines[idx]);
      }
      if (path === "-") {
        writeVar("file-type", "txt");
      }
      if (options.types.length > idx) {
        writeVar("file-type", options.types[idx]);
      }
      sendData = function(callback) {
        if (file === "-") {
          return sendStdin(callback);
        } else if (fs.existsSync(file)) {
          return sendFile(file, callback);
        } else {
          return sendEmptyFile(callback);
        }
      };
      return sendData(function(err) {
        if (err) {
          return console.error("" + err);
        }
        return tcp.write("\n", function() {
          return callback();
        });
      });
    };
    pairs = (function() {
      var i, len, results;
      results = [];
      for (idx = i = 0, len = files.length; i < len; idx = ++i) {
        file = files[idx];
        results.push([file, idx]);
      }
      return results;
    })();
    itr = function(p, callback) {
      return sendOpen(p[0], p[1], callback);
    };
    return async.each(pairs, itr, callback);
  };

}).call(this);
